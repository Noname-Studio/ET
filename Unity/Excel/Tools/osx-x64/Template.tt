<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(TargetDir)/CrossPlatformGenerator.dll"#>
<#@ parameter type="CrossPlatformGenerator.ScriptTemplate" name="Template"#>
<#@ template language="C#" #>
/********************************
  该脚本是自动生成的请勿手动修改
*********************************/
using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Config.ConfigCore;
using UnityEngine;
using UnityEngine.Networking;
using System.IO;
namespace SuperHero.Config
{
<# foreach (var c in Template.CustomClass){ #>
public partial class <#=c.Name#>
{
<# foreach (var v in c.Variables){ #>
    private <#=v.Type#> m<#=v.Name#>;
	public <#=v.Type#> <#=v.Name#>
	{
		get{ return m<#=v.Name#>; }
		set{ m<#=v.Name#> = value; }
	}
<# }#>
}
<# }#>
    public partial class <#=Template.CoreClass.Name#>Property : ConfigAssetManager<<#=Template.CoreClass.Name#>Property>
    {
	    private static string Path = "DB/<#=Template.CoreClass.Name#>.json";
<#foreach (var define in Template.CoreClass.Enum) {#>
	    public enum <#=define.Name#>
	    {
<#foreach (var value in define.Values)#>
<#{#>
    <#if (value.Value.HasValue) {#>
            <#=value.Name#> = <#=value.Value#>,
<#} else {#>
            <#=value.Name#>,
    <#}#>
<#}#>
	}
<#}#>
		
<#foreach (var v in Template.CoreClass.Variables){ #>
	    private <#=v.Type#> m<#=v.Name#>;
        /// <summary>
        /// <#=v.Comment#>
        /// </summary>
        public <#=v.Type#> <#=v.Name#>
        {
            get{ return m<#=v.Name#>; }
            set{ m<#=v.Name#> = value; }
        }
<# }#>
	    public static <#=Template.CoreClass.Name#>Property Read(<#=Template.CoreClass.KeyType#> id, bool throwException = true)
	    {
             return ConfigAssetManager<<#=Template.CoreClass.Name#>Property>.Read(id, throwException);
	    }
    
	    public static Dictionary<<#=Template.CoreClass.KeyType#>,<#=Template.CoreClass.Name#>Property> ReadDict()
	    {
             return ConfigAssetManager<<#=Template.CoreClass.Name#>Property>.Read<#=Template.CoreClass.KeyType#>Dict();
	    }
    
	    public static List<<#=Template.CoreClass.Name#>Property> ReadList()
	    {
             return ConfigAssetManager<<#=Template.CoreClass.Name#>Property>.ReadList();
	    }
    }
}